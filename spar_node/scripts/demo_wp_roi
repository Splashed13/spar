#!/usr/bin/env python3

import sys
from math import *

import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus

from geometry_msgs.msg import Point, PoseStamped

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

from nav_msgs.msg import Path

import tf.transformations

# Libraries for interfacing with breadcrumb
from breadcrumb.srv import RequestPath
from breadcrumb.srv import RequestPathRequest

# This is getting a bit more complicated now, so we'll put our information in
# a class to keep track of all of our variables. This is not so much different
# to the previous methods, other than the fact that the class will operate
# within itself.
# i.e. it will have it's own publishers, subscribers, etc., that
# will call it's own functions as callbacks, etc.
class Guidance():
	def __init__(self, waypoints):
		# Make sure we have a valid waypoint list
		if not self.check_waypoints(waypoints):
			raise ValueError("Invalid waypoint list input!")

		# Internal counter to see what waypoint were are up to
		self.waypoint_counter = 0

		# Set a flag to indicate that we are doing a specific inspection
		# and that we are not following our waypoint list
		# This will stop our "waypoint is reached" callback from firing
		# during the roi diversion and taking over our flight!
		self.performing_roi = False

		# Save the input waypoints
		self.waypoints = waypoints

		self.display_path(waypoints, "Waypoints")

		self.current_yaw = None
		self.current_orientation = None
		self.survey_altitude = rospy.get_param("~survey_altitude", 1)

		# Make some space to record down our current location
		self.current_location = Point() # useful for the nav functionality is peroidically updated
		# Set our linear and rotational velocities for the flight
		# these <~name> parameters are set in the launch file
		# if called with rosrun then 0.2 is used for example.
		self.vel_linear = rospy.get_param("~vel_linear", 0.2)
		self.vel_yaw = rospy.get_param("~vel_yaw", 0.2)
		# Set our position and yaw waypoint accuracies
		self.accuracy_pos = rospy.get_param("~acc_pos", 0.1)
		self.accuracy_yaw = rospy.get_param("~acc_yaw", 0.1)

		# Create our action client
		action_ns = rospy.get_param("~action_topic", 'spar/flight')
		self.spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
		rospy.loginfo("Waiting for spar...")
		self.spar_client.wait_for_server()


		# Wait to connect with Breadcrumb
		# Code will error if you try to connect to a service
		# that does not exist
		rospy.wait_for_service('/breadcrumb/request_path') # blocking code
		self.srvc_bc = rospy.ServiceProxy('/breadcrumb/request_path', RequestPath)

		if not rospy.is_shutdown():
			# Good to go, start mission
			rospy.loginfo("Starting waypoint mission")

			# Setup first waypoint segment
			# XXX:	Another option would be to do "takeoff" and leave "waypoint_counter = 0" to
			#		begin the mission at the first waypoint after take-off
			self.send_wp(self.waypoints[0])
			self.waypoint_counter += 1

			# Setup a timer to check if our waypoint has completed at 20Hz
			self.timer = rospy.Timer( rospy.Duration(1.0/20.0), self.check_waypoint_status )
			# Callback to save "current location" such that we can perform and return
			# from a diversion to the correct location
			# XXX: These topics could be hard-coded to avoid using a launch file
			self.sub_pose = rospy.Subscriber("~pose", PoseStamped, self.callback_pose)
			# Subscriber to catch "ROI" diversion commands
			self.sub_roi = rospy.Subscriber("~roi", PoseStamped, self.callback_inspect_roi)

			# XXX: Could have a publisher to output our waypoint progress
			# throughout the flight (should publish each time the waypoint
			# counter is increased). Note: will also need to import "Float32"
			# from "std_msgs.msg" in the header
			# self.pub_progress = rospy.Subscriber("~waypoint_progress", Float32, 10)

			# If shutdown is issued (eg. CTRL+C), cancel current
	 		# mission before rospy is shutdown.
			rospy.on_shutdown( lambda : self.shutdown() )


	def quaternion_to_rpy(self, orientation):
		# Extract the quaternion from the pose
		quaternion = (
			orientation.x,
			orientation.y,
			orientation.z,
			orientation.w
		)

		self.current_orientation = orientation 

		# Convert quaternion to roll, pitch, yaw
		roll, pitch, yaw = tf.transformations.euler_from_quaternion(quaternion)

		return roll, pitch, yaw

	def display_path(self, wps, type_):
		pub_path = rospy.Publisher(f'/guidance/path{type_}', Path, queue_size=10, latch=True)
		msg = Path()
		msg.header.frame_id = "/map"
		msg.header.stamp = rospy.Time.now()

		for wp in wps:
			pose_ = PoseStamped()
			pose_.pose.position.x = wp[0]
			pose_.pose.position.y = wp[1]
			pose_.pose.position.z = wp[2]

			pose_.pose.orientation = self.current_orientation

			msg.poses.append(pose_)

		pub_path.publish(msg)

	# This function will check if a list of waypoints is in the format we expect
	def check_waypoints(self, wps):
		# Make sure waypoints are a list
		if not isinstance(wps, list):
			rospy.logwarn("Waypoints are not list")
			return False

		# Make sure we have at least one waypoint
		if len(wps) < 1:
			rospy.logwarn("Waypoints list is empty")
			return False

		# Check each of our waypoints
		for i in range(len(wps)):
			if not self.check_waypoint(wps[i]):
				rospy.logwarn("Waypoint %i did not pass check" % (i + 1))
				return False

		# If we haven't returned false yet, then waypoints look good!
		return True


	# This function will check if a waypoint is in the format we expect
	def check_waypoint(self, wp):
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False

		# Check if waypoints are within arena boundaries (8x4) arena
		if abs(wp[0]) > 4 or abs(wp[1]) > 2.5 or abs(wp[3]) > 4:
			rospy.logwarn("Waypoint has an invalid size for 0134 must be within arena bounds")
			return False
		
		# If we haven't returned false yet, then waypoint looks valid!
		return True
	
	def check_imagegry_waypoints(self, wp):
		pass

	# This function will make sure we shut down the node as safely as possible
	def shutdown(self):
		# Unregister anything that needs it here
		self.sub_pose.unregister()
		self.sub_roi.unregister()
		self.spar_client.cancel_goal()

		rospy.loginfo("Guidance stopped")


	# This function will check receive the current pose of the UAV constantly
	def callback_pose(self, msg_in):
		# Store the current position at all times so it can be accessed later
		if(msg_in.pose.position):
			self.current_location = msg_in.pose.position
		# convert msg_in.pose.orientation (quaternion) to rpy.
		if(msg_in.pose.orientation):
			_, _, self.current_yaw = self.quaternion_to_rpy(msg_in.pose.orientation)
		
	# This function will fire whenever a ROI pose message is sent
	# It is also responsible for handling the ROI "inspection task"
	def callback_inspect_roi(self, msg_in):
		# Set our flag that we are performing the diversion
		self.performing_roi = True

		rospy.loginfo("Starting diversion to ROI...")
		# Cancel the current goal (if there is one)
		self.spar_client.cancel_goal()
		# Record our current location so we can return to it later
		start_location = self.current_location
		# XXX:	It would also be a good idea to capture "current yaw" from
		#		the pose to maintain that throughout a diversion
		# Set the "diversion waypoint" (at yaw zero)
		dwp = [msg_in.pose.position.x, msg_in.pose.position.y, msg_in.pose.position.z, self.current_yaw]
		# Set the "return waypoint" (at yaw zero)
		rwp = [self.current_location.x, self.current_location.y, self.current_location.z, self.current_yaw]

		# XXX: Could pause here for a moment with ( "rospy.sleep(...)" ) to make sure the UAV stops correctly

		self.send_wp(dwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		rospy.loginfo("Reached diversion ROI!")
		# XXX: Do something?
		rospy.sleep(rospy.Duration(10))

		rospy.loginfo("Returning to flight plan...")

		self.send_wp(rwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		# "waypoint_counter" represents the "next waypoint"
		# "waypoint_counter - 1" represents the "current waypoint"
		rospy.loginfo("Resuming flight plan from waypoint %i!" % (self.waypoint_counter - 1))
		self.send_wp(self.waypoints[self.waypoint_counter - 1])
		# Unset our flag that we are performing a diversion
		# to allow the waypoint timer to take back over
		self.performing_roi = False


	# This function is for convinience to simply send out a new waypoint
	def send_wp(self, wp):
		# Make sure the waypoint is valid before continuing
		if not self.check_waypoint(wp):
			raise ValueError("Invalid waypoint input!")

		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_GOTO
		goal.position.x = wp[0]
		goal.position.y = wp[1]
		goal.position.z = wp[2]
		goal.yaw = wp[3]
		goal.velocity_vertical = self.vel_linear
		goal.velocity_horizontal = self.vel_linear
		goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.accuracy_pos
		goal.yaw_range = self.accuracy_yaw

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.send_goal(goal)
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())


	# This function will fire whenever we recieve a timer event (te) from rospy.Timer()
	# The main purpose is to check if a waypoint has been reached,
	# and if so, send out the next waypoint to continue the mission
	def check_waypoint_status(self, te):
		# If we're performing the ROI diversion, then don't do
		# anything here, as this is handled in that function
		if not self.performing_roi:
			# If the last segment has succeeded.
			# For more complex tasks, it might be necessary to also
			# check if you are in waypoint or diversion mode here.
			# Hint: really, we should check for other status states
			#		(such as aborted), as there are some states
			#		where we won't recover from, and should just exit
			if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				rospy.loginfo("Reached waypoint %i!" % (self.waypoint_counter))

				# XXX:	Another check could go here to finish the mission early
				#		if "all" inspection tasks have been completed
				#		(Add in another "if" and make the waypoint counter check
				#		 an "elif" check instead.
				#		 i.e. if complete; elif more wps; else wps finished)
				if self.waypoint_counter < (len(self.waypoints)):
					
					req = RequestPathRequest()
					req.start.x = self.waypoints[self.waypoint_counter-1][0] 
					req.start.y = self.waypoints[self.waypoint_counter-1][1]
					req.start.z = self.waypoints[self.waypoint_counter-1][2]
					req.end.x = self.waypoints[self.waypoint_counter][0]
					req.end.y = self.waypoints[self.waypoint_counter][1]
					req.end.z = self.waypoints[self.waypoint_counter][2]

					res = self.srvc_bc(req)

					# Breadcrumb will return a vector of poses if a solution was found
					# If no solution was found (i.e. no solution, or request bad
					# start/end), then breadcrumb returns and empty vector
					# XXX: You could also use res.path_sparse (see breadcrumb docs)
					breadcrumbWPs = []

					if len(res.path.poses) > 0:
						# Print the path to the screen
						rospy.loginfo(f"Waypoint {self.waypoint_counter-1} to Waypoint {self.waypoint_counter}:")
						rospy.loginfo("[%0.2f;%0.2f;%0.2f] => [%0.2f;%0.2f;%0.2f]",
									req.start.x,req.start.y,req.start.z,
									req.end.x,req.end.y,req.end.z)

						# Loop through the solution returned from breadcrumb
						for i in range(len(res.path.poses)):
							rospy.loginfo("    [%0.2f;%0.2f;%0.2f]",
										res.path.poses[i].position.x,
										res.path.poses[i].position.y,
										res.path.poses[i].position.z)
							
							# attempt to maintain current yaw during obstacle avoidance
							yaw_to_use = self.current_yaw if self.current_yaw is not None else 0

							breadcrumbWPs.append([res.path.poses[i].position.x,
										res.path.poses[i].position.y,
										self.survey_altitude, yaw_to_use])
							
					else:
						rospy.logerr("solution not found")
					print(f'Breadcrumb waypoints: {breadcrumbWPs}')
					if(len(breadcrumbWPs) > 1):
						self.display_path(breadcrumbWPs, "Breadcrumb")
						for i in range(len(breadcrumbWPs)):
							self.send_wp(breadcrumbWPs[i])
						self.waypoint_counter += 1
					else:
						self.send_wp(self.waypoints[self.waypoint_counter])
						# Increment our waypoint counter
						self.waypoint_counter += 1
				else:
					# Else the mission is over, shutdown and quit the node
					# XXX:	This could be used to restart the mission back to the
					#		first waypoint instead to restart the mission
					rospy.loginfo("Mission complete!")
					rospy.signal_shutdown("complete")
			elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
				rospy.loginfo("Mission cancelled!")
				rospy.signal_shutdown("cancelled")


def main(args):
	# Initialise ROS
	rospy.init_node('guidance')

	# List of waypoints
	# [X, Y, Z, Yaw]
	# wps = [[ 0.0, 0.0, 1.0, 0.0],
	# 	   [ 1.0, 1.0, 1.0, 0.0],
	# 	   [-1.0, 1.0, 1.0, 0.0],
	# 	   [-1.0,-1.0, 1.0, 0.0],
	# 	   [ 1.0,-1.0, 1.0, 0.0],
	# 	   [ 0.0, 0.0, 1.0, 0.0]]

	survey_altitude = rospy.get_param("~survey_altitude", 1)

	if survey_altitude > 4 or survey_altitude < 0:
		rospy.logwarn("Survey Altitude to high must be 0m < x < 4m")
		return 

	wps = [[ 0.0, 0.0, survey_altitude, 0.0],
		[ 2.5, 2.5, survey_altitude, 0.0],
		[ 2.5, -2.5, survey_altitude, 0.0],
		[ 1.5, -2.5, survey_altitude, 0.0],
		[ 1.5, 2.5, survey_altitude, 0.0],
		[ 0.6, 2.5, survey_altitude, 0.0],
		[ 0.6, -2.5, survey_altitude, 0.0],
		[ -0.8, -2.5, survey_altitude, 0.0],
		[ -0.8, 2.5, survey_altitude, 0.0],
		[ -2.5, 2.5, survey_altitude, 0.0],
		[ -2.5, -2.5, survey_altitude, 0.0],
		[ 0.0, 0.0, survey_altitude, 0.0],
		[ 0.0, 0.0, 0.0, 0.0]]

	# Create our guidance class option
	guide = Guidance(wps)
	
	# Spin!
	rospy.spin()


if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('')
